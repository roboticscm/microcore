@use "sass:math";
$padding-step: 6;
$max-padding: 60px;

// loop over the breakpoints
// padding x
@each $key,
$value in $breakpoints {
  @for $i from 0 through $padding-step {
    .px-#{$key}-#{$padding-step - $i} {
      padding-left: #{math.div(($padding-step - $i), $padding-step) * $max-padding};
      padding-right: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pl-#{$key}-#{$padding-step - $i} {
      padding-left: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pr-#{$key}-#{$padding-step - $i} {
      padding-right: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }
  }
}

@each $key,
$value in $breakpoints-inv {
  @for $i from 0 through $padding-step {
    .px-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-left: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
        padding-right: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pl-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-left: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pr-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-right: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }
  }
}

// padding y
@each $key,
$value in $breakpoints {
  @for $i from 0 through $padding-step {
    .py-#{$key}-#{$padding-step - $i} {
      padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pt-#{$key}-#{$padding-step - $i} {
      padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pb-#{$key}-#{$padding-step - $i} {
      padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pt-#{$padding-step - $i} {
      padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }

    .pb-#{$padding-step - $i} {
      padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
    }
  }
}

@each $key,
$value in $breakpoints-inv {
  @for $i from 0 through $padding-step {
    .py-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
        padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pt-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pb-#{$key}-#{$padding-step - $i} {
      @include break($key) {
        padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pt-#{$padding-step - $i} {
      @include break($key) {
        padding-top: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }

    .pb-#{$padding-step - $i} {
      @include break($key) {
        padding-bottom: #{math.div(($padding-step - $i) , $padding-step) * $max-padding};
      }
    }
  }
}